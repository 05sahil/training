rake db:create
Created database 'laptop_store_man_system'


rails generate model laptop
      invoke  active_record
      create    db/migrate/20200204051630_create_laptops.rb
      create    app/models/laptop.rb
      invoke    test_unit
      create      test/models/laptop_test.rb
      create      test/fixtures/laptops.yml


rake db:migrate
20200204051630 CreateLaptops: migrated (0.0504s) 

rails generate migration AddWeightToLaptops weight:integer
create    db/migrate/20200204072243_add_weight_to_laptops.rb

rails generate migration RemoveWeightFromLaptops
create    db/migrate/20200204072512_remove_weight_from_laptops.rb

rake db:migrate

rails g migration ChangeLaptops
class ChangeLaptops < ActiveRecord::Migration[6.0]
  def change
  	rename_column :laptops, :model, :name
  end
end

rails g model user name:text email:text

rake db:migrate


rails g migration ChangePhoneToBeStringInUsers

class ChangePhoneToBeStringInUsers < ActiveRecord::Migration[6.0]
  def change
  	change_column :users, :phoneno, :string
  end
end

rake db:migrate

 rails g model laptop_spec ram hdd processor os screen color weight

rails g model user name:text username:text password:text email:text phoneno:text address:text

rake db:migrate

rails g model order u_id:bigint ship_id:bigint payment_status:text

 rails g model order_products order_id:bigint pro_id:bigint quantity:integer

rails g model shipment status:text tracking_id

rake db:migrate


**********USE OF REVERSIBLE************
 rails g migration ChangeUsersPasswordToString

class ChangeUsersPasswordToString < ActiveRecord::Migration[6.0]
  def change
  	reversible do |x|
  	  change_table :users do |y|
  	  	x.up {y.change :password, :string}
  	  	x.down {y.change :password, :text}
  	  end
  	end
  end
end

rake db:migrate
rake db:rollback


**********RENAME AND USE OF REVERSIBLE************
rails g migration RenameUsersToPeople

class RenameUsersToPeople < ActiveRecord::Migration[6.0]
  def change
  	reversible do |x|
  	  	x.up {rename_table :users, :people}
  	  	x.down {rename_table :people, :users}
  	end
  end
end

rake db:migrate
rake db:rollback


**********ADD REFERENCE************
rails g migration AddUserRefToOrders

class AddUserRefToOrders < ActiveRecord::Migration[6.0]
  def change
  	add_reference :orders, :user, foreign_key: true
  end
end
rake db:migrate


**********REMOVE REFERENCE************
rails g migration RemoveUserRefToOrders

class RemoveUserRefToOrders < ActiveRecord::Migration[6.0]
  def change
  	remove_reference :orders, :user
  end
end

rake db:migrate


**********ADD USERID COLUMN************
rails g migration AddUserIdtoOrders

class AddUserIdToOrders < ActiveRecord::Migration[6.0]
  def change
    add_column :orders, :user_id, :bigint
  end
end


**********FOREIGN KEY************
rails g migration AddFkeyUserIdtoOrders

class AddFkeyUserIdToOrders < ActiveRecord::Migration[6.0]
  def change
    add_foreign_key :orders, :users
  end
end

rake db:migrate


******CHECK CONSTRAINT************
rails g migration AddCheckConstraintToOrderProducts

class AddCheckConstraintToOrderProducts < ActiveRecord::Migration[6.0]
  def change
    reversible do |x|
      x.up do
        execute <<-SQL
        ALTER TABLE order_products ADD CONSTRAINT chk_quantity CHECK(quantity>0);
        SQL
      end
      x.down do
      	execute <<-SQL
        ALTER TABLE order_products DROP CONSTRAINT chk_quantity;
        SQL
      end	
    end
  end
end

rake db:migrate


******COLUMN MODIFIERS - default and null************
rails g migration ChangeDetailsOfLaptopSpecs

class ChangeDetailsOfLaptopSpecs < ActiveRecord::Migration[6.0]
  def change
  	change_column :laptop_specs, :os, :string, default: 'DOS'
  	change_column_null :laptop_specs, :processor, false
  end
end

rake db:migrate





