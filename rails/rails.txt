rake db:create
Created database 'laptop_store_man_system'


rails generate model laptop
      invoke  active_record
      create    db/migrate/20200204051630_create_laptops.rb
      create    app/models/laptop.rb
      invoke    test_unit
      create      test/models/laptop_test.rb
      create      test/fixtures/laptops.yml


rake db:migrate
20200204051630 CreateLaptops: migrated (0.0504s) 

rails generate migration AddWeightToLaptops weight:integer
create    db/migrate/20200204072243_add_weight_to_laptops.rb

rails generate migration RemoveWeightFromLaptops
create    db/migrate/20200204072512_remove_weight_from_laptops.rb

rake db:migrate

rails g migration ChangeLaptops
class ChangeLaptops < ActiveRecord::Migration[6.0]
  def change
  	rename_column :laptops, :model, :name
  end
end

rails g model user name:text email:text

rake db:migrate


rails g migration ChangePhoneToBeStringInUsers

class ChangePhoneToBeStringInUsers < ActiveRecord::Migration[6.0]
  def change
  	change_column :users, :phoneno, :string
  end
end

rake db:migrate

 rails g model laptop_spec ram hdd processor os screen color weight

rails g model user name:text username:text password:text email:text phoneno:text address:text

rake db:migrate

rails g model order u_id:bigint ship_id:bigint payment_status:text

 rails g model order_products order_id:bigint pro_id:bigint quantity:integer

rails g model shipment status:text tracking_id

rake db:migrate


**********USE OF REVERSIBLE************
 rails g migration ChangeUsersPasswordToString

class ChangeUsersPasswordToString < ActiveRecord::Migration[6.0]
  def change
  	reversible do |x|
  	  change_table :users do |y|
  	  	x.up {y.change :password, :string}
  	  	x.down {y.change :password, :text}
  	  end
  	end
  end
end

rake db:migrate
rake db:rollback


**********RENAME AND USE OF REVERSIBLE************
rails g migration RenameUsersToPeople

class RenameUsersToPeople < ActiveRecord::Migration[6.0]
  def change
  	reversible do |x|
  	  	x.up {rename_table :users, :people}
  	  	x.down {rename_table :people, :users}
  	end
  end
end

rake db:migrate
rake db:rollback


**********ADD REFERENCE************
rails g migration AddUserRefToOrders

class AddUserRefToOrders < ActiveRecord::Migration[6.0]
  def change
  	add_reference :orders, :user, foreign_key: true
  end
end
rake db:migrate


**********REMOVE REFERENCE************
rails g migration RemoveUserRefToOrders

class RemoveUserRefToOrders < ActiveRecord::Migration[6.0]
  def change
  	remove_reference :orders, :user
  end
end

rake db:migrate


**********ADD USERID COLUMN************
rails g migration AddUserIdtoOrders

class AddUserIdToOrders < ActiveRecord::Migration[6.0]
  def change
    add_column :orders, :user_id, :bigint
  end
end


**********FOREIGN KEY************
rails g migration AddFkeyUserIdtoOrders

class AddFkeyUserIdToOrders < ActiveRecord::Migration[6.0]
  def change
    add_foreign_key :orders, :users
  end
end

rake db:migrate


******CHECK CONSTRAINT************
rails g migration AddCheckConstraintToOrderProducts

class AddCheckConstraintToOrderProducts < ActiveRecord::Migration[6.0]
  def change
    reversible do |x|
      x.up do
        execute <<-SQL
        ALTER TABLE order_products ADD CONSTRAINT chk_quantity CHECK(quantity>0);
        SQL
      end
      x.down do
      	execute <<-SQL
        ALTER TABLE order_products DROP CONSTRAINT chk_quantity;
        SQL
      end	
    end
  end
end

rake db:migrate


******COLUMN MODIFIERS - default and null************
rails g migration ChangeDetailsOfLaptopSpecs

class ChangeDetailsOfLaptopSpecs < ActiveRecord::Migration[6.0]
  def change
  	change_column :laptop_specs, :os, :string, default: 'DOS'
  	change_column_null :laptop_specs, :processor, false
  end
end

rake db:migrate


******CHANGING O/P MESSAGES************
rails g migration AddIndexToLaptops

class AddIndexToLaptops < ActiveRecord::Migration[6.0]
  def change
  	reversible do |x|
  	  x.up do 
  	  	suppress_messages{add_index :laptops, :brand}
  	  	say "!!Index Created!!", true
  	  end
  	  x.down do
  	  	suppress_messages{remove_index :laptops, :brand}
  	  	say "!!Index Removed!!", true
  	  end
  	end
  end
end

rake db:migrate
O/P:
== 20200206124931 AddIndexToLaptops: migrating ================================
   -> !!Index Created!!
== 20200206124931 AddIndexToLaptops: migrated (0.0426s) =======================


rake db:rollback

== 20200206124931 AddIndexToLaptops: reverting ================================
   -> !!Index Removed!!
== 20200206124931 AddIndexToLaptops: reverted (0.0080s) =======================


******ADDING RECORDS************
2.6.3 :009 > a = Laptop.new
 => #<Laptop id: nil, brand: nil, name: nil, price: nil, quantity: nil, created_at: nil, updated_at: nil> 
2.6.3 :010 > a.id = 21
 => 21 
2.6.3 :011 > a.brand = 'HP'
 => "HP" 
2.6.3 :012 > a.name = 'Pavilion x-30'
 => "Pavilion x-30" 
2.6.3 :013 > a.price = 24999
 => 24999 
2.6.3 :014 > a.quantity = 15
 => 15 
2.6.3 :015 > a.save


2.6.3 :017 > Laptop.create(id:22,brand:'Dell',name:'Vostro 55',price:28649,quantity:25)
 => #<Laptop id: 22, brand: "Dell", name: "Vostro 55", price: 28649, quantity: 25, created_at: "2020-02-07 13:00:30", updated_at: "2020-02-07 13:00:30"> 


******FINDING RECORDS************
2.6.3 :018 > Laptop.first
  Laptop Load (0.6ms)  SELECT "laptops".* FROM "laptops" ORDER BY "laptops"."id" ASC LIMIT $1  [["LIMIT", 1]]
 => #<Laptop id: 21, brand: "HP", name: "Pavilion x-30", price: 24999, quantity: 15, created_at: "2020-02-07 12:58:35", updated_at: "2020-02-07 12:58:35"> 


2.6.3 :019 > Laptop.last
  Laptop Load (0.5ms)  SELECT "laptops".* FROM "laptops" ORDER BY "laptops"."id" DESC LIMIT $1  [["LIMIT", 1]]
 => #<Laptop id: 22, brand: "Dell", name: "Vostro 55", price: 28649, quantity: 25, created_at: "2020-02-07 13:00:30", updated_at: "2020-02-07 13:00:30"> 


2.6.3 :020 > Laptop.find(22)
  Laptop Load (0.5ms)  SELECT "laptops".* FROM "laptops" WHERE "laptops"."id" = $1 LIMIT $2  [["id", 22], ["LIMIT", 1]]
 => #<Laptop id: 22, brand: "Dell", name: "Vostro 55", price: 28649, quantity: 25, created_at: "2020-02-07 13:00:30", updated_at: "2020-02-07 13:00:30"> 


2.6.3 :021 > Laptop.find_by(brand:"HP")
  Laptop Load (0.6ms)  SELECT "laptops".* FROM "laptops" WHERE "laptops"."brand" = $1 LIMIT $2  [["brand", "HP"], ["LIMIT", 1]]
 => #<Laptop id: 21, brand: "HP", name: "Pavilion x-30", price: 24999, quantity: 15, created_at: "2020-02-07 12:58:35", updated_at: "2020-02-07 12:58:35"> 


******UPDATE RECORDS************
2.6.3 :023 > Laptop.find(21).update(quantity:32)
  Laptop Load (0.7ms)  SELECT "laptops".* FROM "laptops" WHERE "laptops"."id" = $1 LIMIT $2  [["id", 21], ["LIMIT", 1]]
   (0.4ms)  BEGIN
  Laptop Update (0.6ms)  UPDATE "laptops" SET "quantity" = $1, "updated_at" = $2 WHERE "laptops"."id" = $3  [["quantity", 32], ["updated_at", "2020-02-07 13:19:39.901074"], ["id", 21]]
   (31.6ms)  COMMIT
 => true 


******ADDING 1 TO 1 CONNECTION B/W LAPTOP AND LAPTOP_SPEC************
class LaptopSpec < ApplicationRecord
  belongs_to :laptop
end

class Laptop < ApplicationRecord
  has_one :laptop_spec
end

2.6.3 :023 > l2 = Laptop.find(22)
2.6.3 :024 > ap l2.laptop_spec


 {
            :id => 2,
           :ram => "2gb",
           :hdd => "500gb",
     :processor => "i3",
    :created_at => Mon, 10 Feb 2020 09:43:17 UTC +00:00,
    :updated_at => Mon, 10 Feb 2020 09:43:17 UTC +00:00,
     :laptop_id => 22
}


******ADDING RECORDS TO TABLE USERS************
2.6.3 :032 > User.create(name:'Berta',username:'Berta123',password:'12345',email:'xyz.com',phoneno:'99887766',address:'12www fbd')

{
                :id => 2,
              :name => "Berta",
          :username => "Berta123",
          :password => "12345",
             :email => "xyz.com",
           :phoneno => "99887766",
           :address => "12www fbd",
        :created_at => Mon, 10 Feb 2020 10:30:08 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:30:08 UTC +00:00
    }



2.6.3 :032 > User.create(name:'john',username:'john123',password:'12345',email:'xyz.com',phoneno:'99887766',address:'12www fbd')

{
                :id => 1,
              :name => "john",
          :username => "john123",
          :password => "12345",
             :email => "xyz.com",
           :phoneno => "99887766",
           :address => "12www fbd",
        :created_at => Mon, 10 Feb 2020 10:29:28 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 10:29:28 UTC +00:00
    }



******ADDING 1 TO MANY CONNECTION B/W USER AND ORDERS************
class Order < ApplicationRecord
  belongs_to :user
end

class User < ApplicationRecord
  has_many :orders
end


******REMOVE COL(ship_id) FROM ORDERS************
rails g migration RemoveShipIdFromOrder ship_id

class RemoveShipIdFromOrder < ActiveRecord::Migration[6.0]
  def change

    remove_column :orders, :ship_id, :string
  end
end


******ADD FOREIGN KEY TO SHIPMENTS REF(ORDERS)************
rails g migration AddRefToShipments

class AddRefToShipments < ActiveRecord::Migration[6.0]
  def change
  	add_column :shipments, :order_id, :bigint
  	add_foreign_key :shipments, :orders
  end
end

rake db:migrate


******ADDING 1 TO 1 CONNECTION B/W ORDER AND SHIPMENT************
class Shipment < ApplicationRecord
  belongs_to :order
end

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
end


******ADDING RECORDS TO ORDERS AND SHIPMENTS************
2.6.3 :045 > Shipment.create(id:1005,status:'shipped',order_id:105)
2.6.3 :045 > Shipment.create(id:1004,status:'delivered',order_id:104)
2.6.3 :045 > Shipment.create(id:1003,status:'delivered',order_id:103)
2.6.3 :045 > Shipment.create(id:1002,status:'warehouse',order_id:102)
2.6.3 :045 > Shipment.create(id:1001,status:'warehouse',order_id:101)

2.6.3 :045 > Order.create(id:101,user_id:1,payment_status:'received')
2.6.3 :045 > Order.create(id:102,user_id:1,payment_status:'pod')
2.6.3 :045 > Order.create(id:103,user_id:1,payment_status:'pod')
2.6.3 :045 > Order.create(id:104,user_id:2,payment_status:'received')
2.6.3 :045 > Order.create(id:105,user_id:2,payment_status:'received')


******RETRIEVE RECORDS USING ASSOCIATION (order and shipment)************
ap Order.first.shipment
{
             :id => 1001,
         :status => "warehouse",
    :tracking_id => nil,
     :created_at => Mon, 10 Feb 2020 12:08:00 UTC +00:00,
     :updated_at => Mon, 10 Feb 2020 12:08:00 UTC +00:00,
       :order_id => 101
}


2.6.3 :051 > ap Order.last.shipment

{
             :id => 1005,
         :status => "shipped",
    :tracking_id => nil,
     :created_at => Mon, 10 Feb 2020 12:09:01 UTC +00:00,
     :updated_at => Mon, 10 Feb 2020 12:09:01 UTC +00:00,
       :order_id => 105
}

2.6.3 :052 > Shipment.last.order
{
                :id => 105,
    :payment_status => "received",
        :created_at => Mon, 10 Feb 2020 12:04:45 UTC +00:00,
        :updated_at => Mon, 10 Feb 2020 12:04:45 UTC +00:00,
           :user_id => 2
}


2.6.3 :055 > ap Order.find(105).shipment
{
             :id => 1005,
         :status => "shipped",
    :tracking_id => nil,
     :created_at => Mon, 10 Feb 2020 12:09:01 UTC +00:00,
     :updated_at => Mon, 10 Feb 2020 12:09:01 UTC +00:00,
       :order_id => 105
}



******ADDING FOREIGN KEYS TO order_products REF(orders, laptops)************
rails g migration RemoveProIdFromOrderProducts pro_id
create    db/migrate/20200211043833_remove_pro_id_from_order_products.rb

rails g migration AddRefKeyToOrderProducts
class AddFkeyToOrderProducts < ActiveRecord::Migration[6.0]
  def change
  	add_column :order_products, :laptop_id, :bigint
  	add_column :order_products, :order_id, :bigint
  	add_foreign_key :order_products, :laptops
  	add_foreign_key :order_products, :orders
  end
end

rails db:migrate



******ADDING RECORDS TO order_products************
2.6.3 :049 > OrderProduct.create(order_id:101,laptop_id:22,quantity:2)
2.6.3 :049 > OrderProduct.create(order_id:102,laptop_id:22,quantity:1)
2.6.3 :049 > OrderProduct.create(order_id:102,laptop_id:21,quantity:2)
2.6.3 :049 > OrderProduct.create(order_id:103,laptop_id:21,quantity:4)
2.6.3 :049 > OrderProduct.create(order_id:104,laptop_id:21,quantity:4)
2.6.3 :049 > OrderProduct.create(order_id:104,laptop_id:22,quantity:2)
2.6.3 :049 > OrderProduct.create(order_id:105,laptop_id:21,quantity:1)
2.6.3 :049 > OrderProduct.create(order_id:105,laptop_id:22,quantity:3)


******ADDING CONNECTIONS TO order_products one-to-many(orders and laptops)************
class OrderProduct < ApplicationRecord
   belongs_to :orders
   belongs_to :laptops
end

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
  has_many :order_products
  
end

class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
end


**********has_one through Association************
class User < ApplicationRecord
  has_one :account
  has_one :history, through: :account
end

class Account < ApplicationRecord
  belongs_to :user
  has_one :history
end

class User < ApplicationRecord
  has_one :account
  has_one :history, through: :account
end

2.7.0 :015 > ap User.find(2).account
 {
            :id => 102,
       :user_id => 2,
    :created_at => Tue, 11 Feb 2020 10:26:23 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 10:26:23 UTC +00:00
}

ap User.find(1).history
 {
            :id => 201,
    :account_id => 101,
    :created_at => Tue, 11 Feb 2020 10:28:32 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 10:28:32 UTC +00:00
}

2.7.0 :017 > ap Account.find(101).user
 {
            :id => 1,
          :name => "john",
    :created_at => Tue, 11 Feb 2020 10:21:12 UTC +00:00,
    :updated_at => Tue, 11 Feb 2020 10:21:12 UTC +00:00
}


**********Polymorphic Association************
rails g model laptop 

rails g model desktop 

rails g model parts partable_id:bigint partable_type:string
rake db:migrate

class Part < ApplicationRecord
 belongs_to :partable, polymorphic: true
end

class Desktop < ApplicationRecord
  has_many :parts, as: :partable
end

class Laptop < ApplicationRecord
  has_many :parts, as: :partable
end

2.7.0 :053 > ap Laptop.find(2).parts
 :id => 2,
          :partable_id => 2,
        :partable_type => "Laptop",
           :created_at => Wed, 12 Feb 2020 09:26:54 UTC +00:00,
           :updated_at => Wed, 12 Feb 2020 09:26:54 UTC +00:00

2.7.0 :055 > Part.find(1).partable

{
            :id => 1,
    :created_at => Wed, 12 Feb 2020 09:25:03 UTC +00:00,
    :updated_at => Wed, 12 Feb 2020 09:25:03 UTC +00:00
}


**********QUERY INTERFACE: data retrieval************
2.6.3 :002 > User.first
=> #<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28"> 

2.6.3 :005 >  User.first(2)
[#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">, 
#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">] 

2.6.3 :006 > User.last
=> #<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08"> 

2.6.3 :007 > User.last(2)
[#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">, 
#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">] 

2.6.3 :008 > Laptop.take(2)
[#<Laptop id: 22, brand: "Dell", name: "Vostro 55", price: 28649, quantity: 25, created_at: "2020-02-07 13:00:30", updated_at: "2020-02-07 13:00:30">, 
#<Laptop id: 21, brand: "HP", name: "Pavilion x-30", price: 24999, quantity: 32, created_at: "2020-02-07 12:58:35", updated_at: "2020-02-07 13:19:39">] 


**********QUERY INTERFACE: data retrieval (find_each)************

2.6.3 :022 > User.find(1).orders.find_each do |x|
2.6.3 :023 >     ap x.payment_status
2.6.3 :024?>   end

"received"
"pod"
"pod"

2.6.3 :031 > Laptop.find_each do |x|
2.6.3 :032 >     puts x.name
2.6.3 :033?>   end

Pavilion x-30
Vostro 55


**********QUERY INTERFACE: data retrieval (where)************
2.6.3 :037 > x = Order.where("user_id=2")
[#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>, 
#<Order id: 106, payment_status: "received", created_at: "2020-02-11 05:39:49", updated_at: "2020-02-11 05:39:49", user_id: 2>]

2.6.3 :038 > x[0].payment_status
 => "received" 

2.6.3 :044 > OrderProduct.where("order_id=?",y[0]) OR 2.6.3 :045 > OrderProduct.where("order_id=:orderid",orderid:y[0])
[#<OrderProduct id: 8, quantity: 4, created_at: "2020-02-11 05:59:01", updated_at: "2020-02-11 05:59:01", laptop_id: 21, order_id: 104>, 
#<OrderProduct id: 9, quantity: 2, created_at: "2020-02-11 05:59:07", updated_at: "2020-02-11 05:59:07", laptop_id: 22, order_id: 104>]> 

2.6.3 :049 > OrderProduct.where("order_id=:orderid",orderid:val[:key])
[#<OrderProduct id: 10, quantity: 1, created_at: "2020-02-11 05:59:17", updated_at: "2020-02-11 05:59:17", laptop_id: 21, order_id: 105>, 
#<OrderProduct id: 11, quantity: 3, created_at: "2020-02-11 05:59:26", updated_at: "2020-02-11 05:59:26", laptop_id: 22, order_id: 105>]


**********QUERY INTERFACE: subset conditions************

2.6.3 :064 > OrderProduct.where(order_id:[104,105])
[#<OrderProduct id: 8, quantity: 4, created_at: "2020-02-11 05:59:01", updated_at: "2020-02-11 05:59:01", laptop_id: 21, order_id: 104>, 
#<OrderProduct id: 9, quantity: 2, created_at: "2020-02-11 05:59:07", updated_at: "2020-02-11 05:59:07", laptop_id: 22, order_id: 104>, 
#<OrderProduct id: 10, quantity: 1, created_at: "2020-02-11 05:59:17", updated_at: "2020-02-11 05:59:17", laptop_id: 21, order_id: 105>, 
#<OrderProduct id: 11, quantity: 3, created_at: "2020-02-11 05:59:26", updated_at: "2020-02-11 05:59:26", laptop_id: 22, order_id: 105>]

2.6.3 :065 > User.find([1,2])
[#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">, 
#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">] 


**********QUERY INTERFACE: OR and NOT conditions************

2.6.3 :070 > Order.where("user_id=1").or(Order.where("user_id=2"))

[#<Order id: 101, payment_status: "received", created_at: "2020-02-10 12:03:56", updated_at: "2020-02-10 12:03:56", user_id: 1>, 
#<Order id: 102, payment_status: "pod", created_at: "2020-02-10 12:04:11", updated_at: "2020-02-10 12:04:11", user_id: 1>, 
#<Order id: 103, payment_status: "pod", created_at: "2020-02-10 12:04:19", updated_at: "2020-02-10 12:04:19", user_id: 1>,
#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>, 
#<Order id: 106, payment_status: "received", created_at: "2020-02-11 05:39:49", updated_at: "2020-02-11 05:39:49", user_id: 2>]> 

2.6.3 :071 > User.where.not(id:1)
<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">


**********QUERY INTERFACE: ordering************

2.6.3 :072 > User.order("id DESC")
[#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">, 
#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">]

2.6.3 :076 > Laptop.order(name: :desc)
[#<Laptop id: 22, brand: "Dell", name: "Vostro 55", price: 28649, quantity: 25, created_at: "2020-02-07 13:00:30", updated_at: "2020-02-07 13:00:30">, 
#<Laptop id: 21, brand: "HP", name: "Pavilion x-30", price: 24999, quantity: 32, created_at: "2020-02-07 12:58:35", updated_at: "2020-02-07 13:19:39">]


**********QUERY INTERFACE: selection and distinct************
2.7.0 :004 > ap User.where("id>1").select("name")
[#<User id: nil, name: "berta">, #<User id: nil, name: "james">]> 

2.6.3 :003 > OrderProduct.select("order_id").distinct.order("order_id ASC")
[#<OrderProduct id: nil, order_id: 101>, 
#<OrderProduct id: nil, order_id: 102>, 
#<OrderProduct id: nil, order_id: 103>, 
#<OrderProduct id: nil, order_id: 104>, 
#<OrderProduct id: nil, order_id: 105>, 
#<OrderProduct id: nil, order_id: 106>]


**********QUERY INTERFACE: limit and offset************
2.6.3 :009 > Order.limit(3)
[#<Order id: 101, payment_status: "received", created_at: "2020-02-10 12:03:56", updated_at: "2020-02-10 12:03:56", user_id: 1>, 
#<Order id: 102, payment_status: "pod", created_at: "2020-02-10 12:04:11", updated_at: "2020-02-10 12:04:11", user_id: 1>, 
#<Order id: 103, payment_status: "pod", created_at: "2020-02-10 12:04:19", updated_at: "2020-02-10 12:04:19", user_id: 1>]

2.6.3 :008 > Order.limit(2).offset(3)
[#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>]


**********QUERY INTERFACE: group************

2.6.3 :012 > OrderProduct.select("order_id").group("order_id").order("order_id ASC")
[#<OrderProduct id: nil, order_id: 101>, 
#<OrderProduct id: nil, order_id: 102>, 
#<OrderProduct id: nil, order_id: 103>, 
#<OrderProduct id: nil, order_id: 104>, 
#<OrderProduct id: nil, order_id: 105>, 
#<OrderProduct id: nil, order_id: 106>]

2.6.3 :018 > ap OrderProduct.select("order_id, count(order_id) as totalproducts").group("order_id")
[
    [0] #<OrderProduct:0x00007f81ccac7d30> {
                   "id" => nil,
             "order_id" => 101,
        "totalproducts" => 2
    },
    [1] #<OrderProduct:0x00007f81ccac7c18> {
                   "id" => nil,
             "order_id" => 103,
        "totalproducts" => 1
    },
    [2] #<OrderProduct:0x00007f81ccac7b28> {
                   "id" => nil,
             "order_id" => 104,
        "totalproducts" => 2
    },
    [3] #<OrderProduct:0x00007f81ccac7a10> {
                   "id" => nil,
             "order_id" => 105,
        "totalproducts" => 2
    },
    [4] #<OrderProduct:0x00007f81ccac7948> {
                   "id" => nil,
             "order_id" => 102,
        "totalproducts" => 2
    },
    [5] #<OrderProduct:0x00007f81ccac7880> {
                   "id" => nil,
             "order_id" => 106,
        "totalproducts" => 1
    }
]


**********QUERY INTERFACE: having************
2.6.3 :019 > ap OrderProduct.select("order_id, count(order_id) as totalproducts").group("order_id").having("totalproducts>1").order("order_id ASC")
[
    [0] #<OrderProduct:0x00007f81ccbbab98> {
                   "id" => nil,
             "order_id" => 101,
        "totalproducts" => 2
    },
    [1] #<OrderProduct:0x00007f81ccbbaa80> {
                   "id" => nil,
             "order_id" => 102,
        "totalproducts" => 2
    },
    [2] #<OrderProduct:0x00007f81ccbba968> {
                   "id" => nil,
             "order_id" => 104,
        "totalproducts" => 2
    },
    [3] #<OrderProduct:0x00007f81ccbba8a0> {
                   "id" => nil,
             "order_id" => 105,
        "totalproducts" => 2
    }
]

2.6.3 :021 > ap OrderProduct.select("order_id, count(order_id) as totalproducts").group("order_id").having("order_id<=103").order("order_id ASC")
[
    [0] #<OrderProduct:0x00005598210436c0> {
                   "id" => nil,
             "order_id" => 101,
        "totalproducts" => 2
    },
    [1] #<OrderProduct:0x00005598210434e0> {
                   "id" => nil,
             "order_id" => 102,
        "totalproducts" => 2
    },
    [2] #<OrderProduct:0x0000559821043328> {
                   "id" => nil,
             "order_id" => 103,
        "totalproducts" => 1
    }
]


**********QUERY INTERFACE: unscope and only************

2.6.3 :028 > Order.where("id>=103").order("id DESC").limit(2).unscope(:order,:limit)
[#<Order id: 103, payment_status: "pod", created_at: "2020-02-10 12:04:19", updated_at: "2020-02-10 12:04:19", user_id: 1>, 
#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>, 
#<Order id: 106, payment_status: "received", created_at: "2020-02-11 05:39:49", updated_at: "2020-02-11 05:39:49", user_id: 2>]

2.6.3 :034 > Order.where("id>=103 and payment_status = 'received'").order("id DESC").limit(2).only(:where,:limit)
[#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>]> 


**********QUERY INTERFACE: reorder and reverse_order************

2.6.3 :035 > User.all.order(id: :desc).reorder("name DESC")
[#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">, 
#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">]

2.6.3 :036 > User.all.order(name: :desc).reverse_order
[#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">, #<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">]


**********QUERY INTERFACE: reselect************

2.6.3 :045 > Order.select(:id).where("id>101 and id<105").reselect(:id,:user_id)
[#<Order id: 102, user_id: 1>, 
#<Order id: 103, user_id: 1>,
#<Order id: 104, user_id: 2>]

2.6.3 :048 > User.select("id").reselect("id,name")
[#<User id: 1, name: "john">, 
#<User id: 2, name: "Berta">]> 


**********QUERY INTERFACE: readonly objects************
2.6.3 :071 > x = User.readonly.first
2.6.3 :072 > x.name = "Mindy"
 => "Mindy" 
2.6.3 :073 > x.save
Traceback (most recent call last):
        1: from (irb):73
ActiveRecord::ReadOnlyRecord (User is marked as readonly)



**********QUERY INTERFACE: joins************

2.7.0 :006 > Account.joins("inner join users on accounts.user_id = users.id and users.id >1")
[#<Account id: 102, user_id: 2, created_at: "2020-02-11 10:26:23", updated_at: "2020-02-11 10:26:23">, 
#<Account id: 103, user_id: 3, created_at: "2020-02-11 10:26:32", updated_at: "2020-02-11 10:26:32">, #<Acco-12 05:07:43">]

2.6.3 :004 > Order.joins("INNER JOIN users ON orders.user_id=users.id AND orders.id<105")
[#<Order id: 101, payment_status: "received", created_at: "2020-02-10 12:03:56", updated_at: "2020-02-10 12:03:56", user_id: 1>, 
#<Order id: 102, payment_status: "pod", created_at: "2020-02-10 12:04:11", updated_at: "2020-02-10 12:04:11", user_id: 1>, 
#<Order id: 103, payment_status: "pod", created_at: "2020-02-10 12:04:19", updated_at: "2020-02-10 12:04:19", user_id: 1>, 
#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>]

2.6.3 :009 > User.joins(:orders).distinct.order(id: :asc)
[#<User id: 1, name: "john", username: "john123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:29:28", updated_at: "2020-02-10 10:29:28">, 
#<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08">]

2.6.3 :018 > User.joins(:orders).distinct.select("users.id,users.name").order("id ASC")
[#<User id: 1, name: "john">, 
#<User id: 2, name: "Berta">]


**********QUERY INTERFACE: eager loading associations************

2.7.0 :029 > x = User.includes(:accounts,:histories).order("id ASC")
2.7.0 :030 > x.each do |a|
2.7.0 :031 >   puts a.name
2.7.0 :032 > end
Mindy
berta
james


**********VALIDATIONS: presence and absence************

class User < ApplicationRecord
  has_many :accounts
  has_many :histories, through: :accounts
  validates :name, presence: {message: "name can't be blank"}
end
2.7.0 :008 > User.create!(id:1)
ActiveRecord::RecordInvalid (Validation failed: Name name can't be blank)

class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
  validates :name, :email, :phoneno, presence: true
  validates :username, absence: true 
end
2.6.3 :011 > User.create!(id:4, name:"Martha")
ActiveRecord::RecordInvalid (Validation failed: Email can't be blank, Phoneno can't be blank)

2.6.3 :013 > User.create!(id:5, name:"Damon",username:"asdf",email:"123asd@gmail.com",phoneno:"88990088",address:"d block")
ActiveRecord::RecordInvalid (Validation failed: Username must be blank)


**********VALIDATIONS: inclusion and exclusion************

class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
  validates :brand, inclusion: %w(HP Dell Lenovo Acer)
end
2.6.3 :019 > Laptop.create!(id:24,brand:'Apple',name:"macbook pro")
ActiveRecord::RecordInvalid (Validation failed: Brand is not included in the list)

class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
  validates :brand, exclusion: {in: %w(Apple)}
end
2.6.3 :021 > Laptop.create!(id:24,brand:'Apple',name:"macbook pro")
ActiveRecord::RecordInvalid (Validation failed: Brand is reserved)


**********VALIDATIONS: length************

class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
  validates :name, length: {minimum: 3, too_short:"must be more than %{count} characters"} 
end
2.6.3 :025 > User.create!(id:6, name:"Ad",email:"123@gmail.com",phoneno:"8899008000",address:"k block")
ActiveRecord::RecordInvalid (Validation failed: Name must be more than 3 characters)

class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
  validates :name, length: {minimum: 3, too_short:"must be more than %{count} characters"} 
  validates :phoneno, presence: true, length: {is: 10, message: "must be %{count} characters"}
end
2.6.3 :029 > User.create!(id:6, name:"Addy",email:"123@gmail.com",phoneno:"880059669777",address:"k block")
ActiveRecord::RecordInvalid (Validation failed: Phoneno must be 10 characters)


**********VALIDATIONS: numericality************

class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
  validates :price, presence: true, numericality: {greater_than_or_equal_to: 5000, message: "must be greater than %{count}"}
end
2.6.3 :034 > Laptop.create!(id:23,brand:"Lenovo",name:"Thinkpad", price:4999, quantity: 10)
ActiveRecord::RecordInvalid (Validation failed: Price must be greater than 5000)


**********VALIDATIONS: uniqueness************

class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
  validates :price, presence: true, numericality: {greater_than_or_equal_to: 5000, message: "must be greater than %{count}"}
  validates :name, presence: true, uniqueness: true
end
2.6.3 :040 > Laptop.create!(id:25,brand:"Lenovo",name:"Thinkpad", price:8455, quantity: 15)
ActiveRecord::RecordInvalid (Validation failed: Name has already been taken)


**********VALIDATIONS: format************

class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
  validates :name, length: {minimum: 3, too_short:"must be more than %{count} characters"} 
  validates :phoneno, presence: true, length: {is: 10, message: "must be %{count} characters"}
  validates :email, presence: true, format: {with: /\A\w+\.?\w+@[a-z]+\.[a-z]+/, message: "Enter valid email address"}
end
2.6.3 :042 > User.create!(id:6, name:"Addy",email:"123gmail.com",phoneno:"8800596697",address:"k block")
ActiveRecord::RecordInvalid (Validation failed: Email Enter valid email address)


**********VALIDATIONS: skipping validations using save************
class User < ApplicationRecord
  has_many :accounts
  has_many :histories, through: :accounts
  validates :name, presence: {message: "name can't be blank", strict: true}
end
2.7.0 :018 > y.id = 6
2.7.0 :019 > y = User.new
2.7.0 :020 > y.id = 6
2.7.0 :021 > y.save!(validate: false)
=> true 


**********VALIDATIONS: on (validation options)************
class User < ApplicationRecord
  has_many :accounts
  has_many :histories, through: :accounts
  validates :name, presence: {message: "name can't be blank", on: :account_setup}
  
end

2.7.0 :028 > x = User.new
2.7.0 :029 > x.id = 8
2.7.0 :032 > x.valid?(:account_setup)
 => false 
2.7.0 :034 > x.errors.messages
 => {:name=>["name can't be blank"]} 

2.7.0 :035 > x.save!(context: :account_setup)
ActiveRecord::RecordInvalid (Validation failed: Name name can't be blank)


**********VALIDATIONS: conditional validations (if and unless)************
class User < ApplicationRecord
  has_many :accounts
  has_many :histories, through: :accounts
  validates :name, presence: {message: "name can't be blank"}, if: -> {id>10}
  
end
2.7.0 :038 > User.create!(id:11)
ActiveRecord::RecordInvalid (Validation failed: Name name can't be blank)


class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
  validates :name, length: {minimum: 3, too_short:"must be more than %{count} characters"} 
  validates :email, presence: true, format: {with: /\A\w+\.?\w+@[a-z]+\.[a-z]+/, message: "Enter valid email address"}
  validates :phoneno, length: {is: 10, message: "must be of 10 digits"}, unless: -> {phoneno.blank?}
end
2.6.3 :053 > User.create!(id:7, name:"Jill",email:"123@gmail.com",phoneno:88006678908,address:"k block")
ActiveRecord::RecordInvalid (Validation failed: Phoneno must be of 10 digits)

2.6.3 :054 > User.create!(id:7, name:"Jill",email:"123@gmail.com",address:"k block")
=> #<User id: 7, name: "Jill", username: nil, password: nil, email: "123@gmail.com", phoneno: nil, address: "k block", created_at: "2020-02-17 12:15:51", updated_at: "2020-02-17 12:15:51"> 


**********VALIDATIONS: custom validator************
class NameValidator < ActiveModel::Validator
 def validate(record)
 	if record.name.match? (/\A[a-z|A-Z]+\w*/)
 		return true
 	else 
 		record.errors[:base] << "Username can't start with numbers"
 	end
 end
end

class User < ApplicationRecord
  has_many :accounts
  has_many :histories, through: :accounts
  validates :name, presence: {message: "name can't be blank"}
  validates_with NameValidator
end
2.7.0 :020 > User.create!(id:8,name:'123sahil')
ActiveRecord::RecordInvalid (Validation failed: Username can't start with numbers)


**********VALIDATIONS: custom methods************
class LaptopSpec < ApplicationRecord
  belongs_to :laptop
  validate :RamValidator
  
  def RamValidator 
  	if ram.match? (/\A\d{1,2}[gb]/)
  	  puts true
  	else 
  	  errors.add(:ram,"invalid ram spec")
  	end
  end
end

2.6.3 :016 > LaptopSpec.create!(laptop_id:24,ram:"2445gb")
   (0.3ms)  BEGIN
  Laptop Load (0.5ms)  SELECT "laptops".* FROM "laptops" WHERE "laptops"."id" = $1 LIMIT $2  [["id", 24], ["LIMIT", 1]]
   (0.4ms)  ROLLBACK
Traceback (most recent call last):
        1: from (irb):16
ActiveRecord::RecordInvalid (Validation failed: Ram invalid ram spec)

def HddValidator
  	if hdd.match? (/\A\d{1,3}[gb|tb]/)
  	  puts true
  	else 
  	  errors.add(:hdd,"invalid hdd spec")
  	end
  end
2.6.3 :036 > LaptopSpec.create!(laptop_id:24,ram:"16gb",hdd:"9000")
ActiveRecord::RecordInvalid (Validation failed: Hdd invalid hdd spec)


**********QUERY INTERFACE: Scopes************

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
  has_many :order_products
  scope :paid_orders, -> {where("payment_status = 'received'").order(id: :asc)}
end
2.6.3 :044 > Order.paid_orders
[#<Order id: 101, payment_status: "received", created_at: "2020-02-10 12:03:56", updated_at: "2020-02-10 12:03:56", user_id: 1>, 
#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>, 
#<Order id: 106, payment_status: "received", created_at: "2020-02-11 05:39:49", updated_at: "2020-02-11 05:39:49", user_id: 2>]> 


**********QUERY INTERFACE: default scope and passing arguments************

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
  has_many :order_products
  default_scope {where("user_id=1").order(id: :asc)}
  scope :paid_orders, -> {where("payment_status = 'received'").order(id: :asc)}
end
2.6.3 :049 > Order.all
[#<Order id: 101, payment_status: "received", created_at: "2020-02-10 12:03:56", updated_at: "2020-02-10 12:03:56", user_id: 1>, 
#<Order id: 102, payment_status: "pod", created_at: "2020-02-10 12:04:11", updated_at: "2020-02-10 12:04:11", user_id: 1>, 
#<Order id: 103, payment_status: "pod", created_at: "2020-02-10 12:04:19", updated_at: "2020-02-10 12:04:19", user_id: 1>]

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
  has_many :order_products
  scope :user_orders, ->(uid) {where("user_id = ?",uid)}
  scope :paid_orders, -> {where("payment_status = 'received'").order(id: :asc)}
end
2.6.3 :054 > Order.user_orders(2)
[#<Order id: 104, payment_status: "received", created_at: "2020-02-10 12:04:37", updated_at: "2020-02-10 12:04:37", user_id: 2>, 
#<Order id: 105, payment_status: "received", created_at: "2020-02-10 12:04:45", updated_at: "2020-02-10 12:04:45", user_id: 2>, 
#<Order id: 106, payment_status: "received", created_at: "2020-02-11 05:39:49", updated_at: "2020-02-11 05:39:49", user_id: 2>]


**********QUERY INTERFACE: dynamic finders************

2.6.3 :055 > User.find_by_name('Berta')
 => #<User id: 2, name: "Berta", username: "Berta123", password: [FILTERED], email: "xyz.com", phoneno: "99887766", address: "12www fbd", created_at: "2020-02-10 10:30:08", updated_at: "2020-02-10 10:30:08"> 

2.6.3 :061 > LaptopSpec.find_by_laptop_id(21)
 => #<LaptopSpec id: 1, ram: "4gb", hdd: "1tb", processor: "i5", created_at: "2020-02-10 07:33:24", updated_at: "2020-02-10 07:33:24", laptop_id: 21> 


**********QUERY INTERFACE: finding by sql************

2.6.3 :067 > OrderProduct.find_by_sql("select * from order_products where order_id = 101")
[#<OrderProduct id: 1, quantity: 2, created_at: "2020-02-11 05:56:28", updated_at: "2020-02-11 05:56:28", laptop_id: 21, order_id: 101>, 
#<OrderProduct id: 4, quantity: 2, created_at: "2020-02-11 05:58:22", updated_at: "2020-02-11 05:58:22", laptop_id: 22, order_id: 101>] 

2.6.3 :069 > ap OrderProduct.find_by_sql("select order_id,count(order_id) total_products from order_products group by order_id ")
[
    [0] #<OrderProduct:0x00005630a101d088> {
                    "id" => nil,
              "order_id" => 101,
        "total_products" => 2
    },
    [1] #<OrderProduct:0x00005630a101cdb8> {
                    "id" => nil,
              "order_id" => 103,
        "total_products" => 1
    },
    [2] #<OrderProduct:0x00005630a101cbb0> {
                    "id" => nil,
              "order_id" => 104,
        "total_products" => 2
    },
    [3] #<OrderProduct:0x00005630a101c818> {
                    "id" => nil,
              "order_id" => 105,
        "total_products" => 2
    },
    [4] #<OrderProduct:0x00005630a101c6b0> {
                    "id" => nil,
              "order_id" => 102,
        "total_products" => 2
    },
    [5] #<OrderProduct:0x00005630a101c548> {
                    "id" => nil,
              "order_id" => 106,
        "total_products" => 1
    }
]


**********QUERY INTERFACE: ids, pluck and exists?************

2.6.3 :073 > User.pluck(:name,:phoneno)
 => [["john", "99887766"], ["Berta", "99887766"], ["Amanda", nil], ["Martha", "88990088"], ["Addy", nil], ["Jill", nil]] 

2.6.3 :074 > OrderProduct.where("order_id=101").pluck(:laptop_id,:quantity)
 => [[21, 2], [22, 2]] 

2.6.3 :080 > User.ids
 => [1, 2, 3, 4, 6, 7] 

2.6.3 :081 > Order.ids
 => [101, 102, 103, 104, 105, 106] 

2.6.3 :082 > OrderProduct.ids
 => [1, 2, 4, 5, 6, 7, 8, 9, 10, 11] 

2.6.3 :083 > Laptop.ids
 => [22, 21, 23, 24] 

2.6.3 :075 > User.exists?
 => true 

2.6.3 :076 > Shipment.exists?
 => true 

2.6.3 :078 > User.exists?(name:"Berta")
 => true 

2.6.3 :079 > User.exists?(name:"Andy")
 => false 


**********ASSOCIATIONS: has_many through (laptop store)************
class User < ApplicationRecord
  has_many :orders
  has_many :order_products, through: :orders
end

class Order < ApplicationRecord
  belongs_to :user
  has_one :shipment
  has_many :order_products
  scope :user_orders, ->(uid) {where("user_id = ?",uid)}
  scope :paid_orders, -> {where("payment_status = 'received'").order(id: :asc)}
end

class OrderProduct < ApplicationRecord
   belongs_to :order
end

2.6.3 :030 > User.first.order_products
[#<OrderProduct id: 1, quantity: 2, created_at: "2020-02-11 05:56:28", updated_at: "2020-02-11 05:56:28", laptop_id: 21, order_id: 101>, 
#<OrderProduct id: 4, quantity: 2, created_at: "2020-02-11 05:58:22", updated_at: "2020-02-11 05:58:22", laptop_id: 22, order_id: 101>, 
#<OrderProduct id: 5, quantity: 1, created_at: "2020-02-11 05:58:33", updated_at: "2020-02-11 05:58:33", laptop_id: 22, order_id: 102>, 
#<OrderProduct id: 6, quantity: 2, created_at: "2020-02-11 05:58:43", updated_at: "2020-02-11 05:58:43", laptop_id: 21, order_id: 102>, 
#<OrderProduct id: 7, quantity: 4, created_at: "2020-02-11 05:58:50", updated_at: "2020-02-11 05:58:50", laptop_id: 21, order_id: 103>]

2.6.3 :031 > User.find(2).order_products
[#<OrderProduct id: 2, quantity: 2, created_at: "2020-02-11 05:56:44", updated_at: "2020-02-11 05:56:44", laptop_id: 21, order_id: 106>, 
#<OrderProduct id: 8, quantity: 4, created_at: "2020-02-11 05:59:01", updated_at: "2020-02-11 05:59:01", laptop_id: 21, order_id: 104>, 
#<OrderProduct id: 9, quantity: 2, created_at: "2020-02-11 05:59:07", updated_at: "2020-02-11 05:59:07", laptop_id: 22, order_id: 104>, 
#<OrderProduct id: 10, quantity: 1, created_at: "2020-02-11 05:59:17", updated_at: "2020-02-11 05:59:17", laptop_id: 21, order_id: 105>, 
#<OrderProduct id: 11, quantity: 3, created_at: "2020-02-11 05:59:26", updated_at: "2020-02-11 05:59:26", laptop_id: 22, order_id: 105>]


**********ASSOCIATIONS: has_one through (laptop store)************
class Laptop < ApplicationRecord
  has_one :laptop_spec
  has_many :order_products
end

class LaptopSpec < ApplicationRecord
  belongs_to :laptop
end

class OrderProduct < ApplicationRecord
   belongs_to :order
   belongs_to :laptop
   has_one :laptop_spec, through: :laptop
end

2.6.3 :032 > OrderProduct.find(1).laptop_spec
<LaptopSpec id: 1, ram: "4gb", hdd: "1tb", processor: "i5", created_at: "2020-02-10 07:33:24", updated_at: "2020-02-10 07:33:24", laptop_id: 21> 


**********Validations: error handling************
2.7.0 :054 > x = User.new()
2.7.0 :055 > x.valid?
 => false 

2.7.0 :056 > x.errors.messages
 => {:name=>["name can't be blank"], :id=>["id can't be blank"]} 

2.7.0 :059 > x.errors.messages[:id]
 => ["id can't be blank"] 

2.7.0 :060 > x.errors.messages[:name]
 => ["name can't be blank"] 


**********Creating views and controllers************
Rails.application.routes.draw do
  resource :users
  get "user/new",to:"users#new"
end

class UsersController < ApplicationController
	def new
		@x = 10
	end
end

new.html.erb
<!DOCTYPE html>
<html>
<head>
	<title>User</title>
	<style type="text/css">
		body {background: #000}
		.s1 {	width: 50%; 
				height: 200px; 
				background: #fff; 
				margin: auto;
				display: flex;
				justify-content: center;
				align-items: center;
				font-size: 25px;
				font-weight: bold;
			}
	</style>
</head>
<body>
  <div class="s1">
  	SAMPLE TEXT
  </div>
</body>
</html>


**********displaying values at view************
class UsersController < ApplicationController
  def new
  	@x = 100
	@ar = [2,4,6,8,10]
  end
end

new.html.erb
  <div class="s1">
  	<%=@x%>
  	<%@ar.each do |x|%>
  		<%=x%>
  	<%end%>
  </div>


**********creating forms (text field and submit button)************
class UsersController < ApplicationController
  def new
  	@user = User.new
  end
end

<body>
  <div class="s1">
    <%=form_for @user do |user|%>
      <%=user.label :name%> <br>
      <%=user.text_field :name%><br>
      <%=user.submit%>
    <%end%>
  </div>
</body>

